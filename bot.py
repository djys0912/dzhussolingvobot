import pandas as pd
import json
import os
import logging
from dotenv import load_dotenv
load_dotenv()
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import random

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
def load_data():
    file_path = 'words_data.json'  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    
    try:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8') as file:
                data = json.load(file)
            logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.")
        else:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã
            try:
                url = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vQH5SmbRNLl9UJ3PU9HRkwmf6AouHGfXqslHqqJbtSP8CZaDpbjl3z2s8Ex9EUBuPMA5HofhJX7K7Fpt/pub?output=csv'
                df = pd.read_csv(url)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ç–∞–±–ª–∏—Ü—ã
                data = df.to_dict(orient='records')  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                with open(file_path, 'w', encoding='utf-8') as file:
                    json.dump(data, file, ensure_ascii=False, indent=4)
                logger.info("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å Google –¢–∞–±–ª–∏—Ü—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã: {e}")
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å
                data = [
                    {
                        "–°–ª–æ–≤–æ (DE)": "der Hund",
                        "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç": "—Å–æ–±–∞–∫–∞",
                        "–ù–µ–≤–µ—Ä–Ω—ã–π 1": "–∫–æ—à–∫–∞",
                        "–ù–µ–≤–µ—Ä–Ω—ã–π 2": "–º—ã—à—å",
                        "–ù–µ–≤–µ—Ä–Ω—ã–π 3": "–ø—Ç–∏—Ü–∞"
                    },
                    {
                        "–°–ª–æ–≤–æ (DE)": "das Haus",
                        "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç": "–¥–æ–º",
                        "–ù–µ–≤–µ—Ä–Ω—ã–π 1": "–º–∞—à–∏–Ω–∞",
                        "–ù–µ–≤–µ—Ä–Ω—ã–π 2": "—É–ª–∏—Ü–∞",
                        "–ù–µ–≤–µ—Ä–Ω—ã–π 3": "–ø–∞—Ä–∫"
                    },
                    {
                        "–°–ª–æ–≤–æ (DE)": "die Frau",
                        "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç": "–∂–µ–Ω—â–∏–Ω–∞",
                        "–ù–µ–≤–µ—Ä–Ω—ã–π 1": "–º—É–∂—á–∏–Ω–∞",
                        "–ù–µ–≤–µ—Ä–Ω—ã–π 2": "—Ä–µ–±–µ–Ω–æ–∫",
                        "–ù–µ–≤–µ—Ä–Ω—ã–π 3": "–¥–µ–≤–æ—á–∫–∞"
                    }
                ]
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ
                with open(file_path, 'w', encoding='utf-8') as file:
                    json.dump(data, file, ensure_ascii=False, indent=4)
                logger.info("–°–æ–∑–¥–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        data = [
            {
                "–°–ª–æ–≤–æ (DE)": "der Hund",
                "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç": "—Å–æ–±–∞–∫–∞",
                "–ù–µ–≤–µ—Ä–Ω—ã–π 1": "–∫–æ—à–∫–∞",
                "–ù–µ–≤–µ—Ä–Ω—ã–π 2": "–º—ã—à—å",
                "–ù–µ–≤–µ—Ä–Ω—ã–π 3": "–ø—Ç–∏—Ü–∞"
            }
        ]
        
    return data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å–ª–æ–≤
async def start_training(update: Update, context: ContextTypes.DEFAULT_TYPE):
    words_data = load_data()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ

    # –°–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–æ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    word = random.choice(words_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å —á–µ—Ç—ã—Ä—å–º—è –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    question = word['–°–ª–æ–≤–æ (DE)']
    correct_answer = word['–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç']
    options = [correct_answer, word['–ù–µ–≤–µ—Ä–Ω—ã–π 1'], word['–ù–µ–≤–µ—Ä–Ω—ã–π 2'], word['–ù–µ–≤–µ—Ä–Ω—ã–π 3']]
    random.shuffle(options)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not context.user_data:
        context.user_data = {}
    context.user_data['correct_answer'] = correct_answer
    context.user_data['current_question'] = question

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    keyboard = [[option] for option in options]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        f"–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Å–ª–æ–≤–æ: {question}?",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_answer = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    if context.user_data and 'correct_answer' in context.user_data:
        correct_answer = context.user_data['correct_answer']
        if user_answer == correct_answer:
            await update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! –û—Ç–ª–∏—á–Ω–æ! ‚úÖ")
        else:
            await update.message.reply_text(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π: {correct_answer} ‚ùå")
        
        # –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–∏–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
        keyboard = [
            ["üìö –ï—â–µ —Å–ª–æ–≤–æ", "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"],
            ["üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        del context.user_data['correct_answer']
        del context.user_data['current_question']
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await handle_message(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    keyboard = [
        ["üìö –£—á–∏—Ç—å —Å–ª–æ–≤–∞", "üéØ –£—á–∏—Ç—å –∞—Ä—Ç–∏–∫–ª–∏"],
        ["üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞ üá©üá™.\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üìö –£—á–∏—Ç—å —Å–ª–æ–≤–∞" or text == "üìö –ï—â–µ —Å–ª–æ–≤–æ":
        await start_training(update, context)  # –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    elif text == "üéØ –£—á–∏—Ç—å –∞—Ä—Ç–∏–∫–ª–∏":
        await update.message.reply_text("–°–∫–æ—Ä–æ –Ω–∞—á–Ω—ë–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ –∞—Ä—Ç–∏–∫–ª—è–º!")
    elif text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await update.message.reply_text("–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –∑–¥–µ—Å—å!")
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await start(update, context)
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, —Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
        await handle_answer(update, context)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
    token = os.getenv("BOT_TOKEN")
    if not token:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()